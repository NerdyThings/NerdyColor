define(["require", "exports", './nerdy-color-core-alpha'], function (require, exports, nerdy_color_core_alpha_1) {
    "use strict";
    const parseRGB = nerdy_color_core_alpha_1.Parse.rgb;
    ///<amd-module name="NerdyColor"/>
    var NerdyColor;
    (function (NerdyColor) {
        class Utils {
        }
        Utils.Parse = nerdy_color_core_alpha_1.Parse;
        Utils.ObservableObject = nerdy_color_core_alpha_1.ObservableObject;
        Utils.observersOf = nerdy_color_core_alpha_1.Oberservables.observersOf;
        NerdyColor.Utils = Utils;
        class Color extends nerdy_color_core_alpha_1.ObservableObject {
            constructor({ r, g, b, alpha = 1.0, components = [0, 0, 0], componentNames = ['r', 'g', 'b'] } = {}) {
                super();
                // console.log('new NerdyColor.Color', { r, g, b, alpha, components, componentNames, mode: (componentNames.length ? componentNames : componentNames = (componentNames = ['r', 'g', 'b'])).join("").toLowerCase(), arguments });
                const fail = (reason = 'Color parameters cannot be parsed!') => { throw 'Cannot create color: ' + reason; };
                // Parse colorSpecification: string (Only rgb() and rgba() css syntax supported)
                if (nerdy_color_core_alpha_1.isString(arguments[0])) {
                    ((colorString) => {
                        var matchedString, matchedComponents;
                        if ((/\#[0-9A-F]{3,6}/i).test(colorString)) {
                            fail('Hex color parameters cannot be parsed yet!');
                        }
                        else if ((/rgba?\s*\(\s*\d+\s*\,\s*\d+\s*\,\s*\d+\s*[\,\)]/).test(colorString)) {
                            [matchedString] = colorString.match(/rgba?\s*\(.*?\)/i);
                            matchedComponents = colorString.match(/\b([01]?\.\d+|1|0|\d+)\b/g);
                            if (matchedComponents.length >= 3) {
                                components = [parseRGB(matchedComponents[0]) || 0, parseRGB(matchedComponents[1]) || 0, parseRGB(matchedComponents[2]) || 0];
                                componentNames = ['r', 'g', 'b'];
                            }
                            else
                                fail('RGB color parameters cannot be parsed: ' + matchedString);
                            if (matchedComponents.length >= 4)
                                alpha = Math.min(Math.max(0, parseFloat(matchedComponents[3])), 1);
                        } // other cases to be added later
                    })(arguments[0]);
                }
                // Determine Mode (Only rgb supported so far)
                this.mode = (componentNames.length ? componentNames : componentNames = (componentNames = ['r', 'g', 'b'])).join("").toLowerCase();
                if (this.mode === 'rgb')
                    components = [(nerdy_color_core_alpha_1.isNumber(r) ? r : components[0] || 0), (nerdy_color_core_alpha_1.isNumber(g) ? g : components[1] || 0), (nerdy_color_core_alpha_1.isNumber(b) ? b : components[2] || 0)];
                this.components = components, this.componentNames = componentNames, this.alpha = alpha;
            }
            getComponent(id) {
                let index = parseInt(id);
                if (isNaN(index) && nerdy_color_core_alpha_1.isString(id))
                    index = (this.componentNames || ['r', 'g', 'b']).indexOf(id.toLowerCase());
                return this.components[index];
            }
            getComponents() {
                return this.components;
            }
            setComponents({ r = this.getComponent('r'), g = this.getComponent('g'), b = this.getComponent('b') }) {
                r = nerdy_color_core_alpha_1.Parse.rgb(r), g = nerdy_color_core_alpha_1.Parse.rgb(g), b = nerdy_color_core_alpha_1.Parse.rgb(b);
                if (this.components[0] === r && this.components[2] === g && this.components[1] === b)
                    return false;
                /* Changed */ this.components = [r, g, b], this.publish(this, 'components-changed');
                return true;
            }
        }
        NerdyColor.Color = Color;
    })(NerdyColor = exports.NerdyColor || (exports.NerdyColor = {}));
});
// export default NerdyColor; 
//# sourceMappingURL=data:application/json;base64,